#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
MkE API definitions and classes
"""

__author__ = "Ondra Fisar"
__copyright__ = "Copyright (c) 2017-2010, Magik-Eye Inc."

import math
import imageio
from .api import *

# API Calls -----

CMD_GET_SHUTTER = 1006
CMD_SET_SHUTTER = 1007
CMD_GET_GAIN = 1008
CMD_SET_GAIN = 1009
CMD_GET_LASER = 1010
CMD_SET_LASER = 1011
CMD_GET_IMAGE = 1012
CMD_GET_DEBUG_IMAGES = 1013
CMD_GET_STATS = 1014
CMD_GET_RESERVED_INFO = 1015
CMD_GET_PROFILE = 1016
CMD_RESET_STATS = 1017
CMD_SET_PROFILE = 2002

# API State enums -----

STATE_SERVICE = 10

# API Terminate enums -----

TERMINATE_RESTART = 3
TERMINATE_EXIT = 4

# API FrameType enum

FRAME_TYPE_RESERVED_1 = 1001
FRAME_TYPE_RESERVED_2 = 1002

# image formats

IMAGE_FORMAT_DEFAULT = 0
IMAGE_FORMAT_PGM = 1
IMAGE_FORMAT_PNG = 2

MAP_IMAGE_FORMAT = {'DEFAULT': IMAGE_FORMAT_DEFAULT,
                    'PGM': IMAGE_FORMAT_PGM,
                    'PNG': IMAGE_FORMAT_PNG}
REVMAP_IMAGE_FORMAT = {IMAGE_FORMAT_PGM: 'PGM',
                       IMAGE_FORMAT_PNG: 'PNG'}

# API Flags

FLAGS_TURN_OFF_LASERS_AFTER = 0x01

# ------------------------------------------------------------------------------

GainSetup = collections.namedtuple('GainSetup',
                                   ['analog', 'digital'])

LaserSetup = collections.namedtuple('LaserSetup',
                                    ['pattern', 'duration', 'offset'])


# ------------------------------------------------------------------------------

def from_sci(scival):
    """Convert sci value to float."""
    return scival[0] * math.pow(2, scival[1])


# ------------------------------------------------------------------------------

def to_sci(value):
    """Convert float value to sci value."""
    exp = math.floor(math.log2(abs(value)) - 6) if value != 0 else 0
    mantisa = round(value / math.pow(2, exp))
    return mantisa, exp


# ------------------------------------------------------------------------------

class PayloadRequest(Request):
    """Api Request with payload"""
    __slots__ = 'payload',

    __PAYLOAD_PARAMS_LEN = 4

    def __init__(self, cmd, seq_id=None,
                 params=bytearray(__PAYLOAD_PARAMS_LEN), payload=None):
        """Contruct new ApiPayloadRequest.

        Arguments:
        cmd: API command of request
        seq_id: `sequnce_id` of the request. Could be None, will be auto-generated by Bus
        params: request parameters
        payload: request payload
        """
        assert (2000 <= cmd < 3000)
        assert (len(params) == PayloadRequest.__PAYLOAD_PARAMS_LEN)

        new_params = struct.pack('<I', len(payload)) + params
        super().__init__(cmd, seq_id, new_params)
        self.payload = payload

    def assemble(self):
        """Assemble request."""
        return super().assemble() + self.payload


# ------------------------------------------------------------------------------

class ReservedFrame(Frame):
    """Frame with extra description for detections"""
    __slots__ = 'lut2d', 'det', 'bwidth', 'sigma', 'resp'

    __RESERVED_FRAME_ITEM_SIZES = {FRAME_TYPE_RESERVED_1: 20,
                                   FRAME_TYPE_RESERVED_2: 36}

    def parse_payload_only(self, num_pts, payload):
        """Parse only payload from its binnary form"""
        super().parse_payload_only(num_pts, payload)
        self.lut2d /= 256 ** 2

    def _prepare(self, num_data):
        """Prepare structures before parsering"""
        super()._prepare(num_data)
        self.lut2d = np.empty((num_data, 2))
        if self.frame_type >= FRAME_TYPE_RESERVED_2:
            self.det = np.empty(num_data)
            self.bwidth = np.empty(num_data)
            self.sigma = np.empty(num_data)
            self.resp = np.empty(num_data)
        else:
            self.det = None
            self.bwidth = None
            self.sigma = None
            self.resp = None

    def _parse_frame_item(self, idx, item_data):
        """Parse single frame item."""
        super()._parse_frame_item(idx, item_data)

        if self.frame_type >= FRAME_TYPE_RESERVED_1:
            self.lut2d[idx, :] = struct.unpack('<II', item_data[12:20])

        if self.frame_type >= FRAME_TYPE_RESERVED_2:
            self.det[idx], self.bwidth[idx], self.sigma[idx], self.resp[idx] = struct.unpack('<IIII', item_data[20:36])

    def _frame_item_size(self, frame_type):
        """Return frame item size"""
        if frame_type in ReservedFrame.__RESERVED_FRAME_ITEM_SIZES:
            return ReservedFrame.__RESERVED_FRAME_ITEM_SIZES[frame_type]
        return super()._frame_item_size(frame_type)

# ------------------------------------------------------------------------------


class Image:
    """Image with meta data"""

    __slots__ = 'timer', 'image_id', 'data', 'format'

    def __init__(self, timer=None, image_id=None, data=b'', format="UNKNOWN"):
        self.timer = timer
        self.image_id = image_id
        self.data = data
        self.format = format

    def get_image(self):
        return imageio.imread(self.data, format=self.format)


# ------------------------------------------------------------------------------


class DebugImage:
    """DebugImage means RAW image + 3D frame + metadata."""
    __slots__ = 'frame', 'image', 'pattern'

    def __init__(self, frame=ReservedFrame(), image=Image(), pattern=None):
        self.frame = frame
        self.image = image
        self.pattern = pattern
